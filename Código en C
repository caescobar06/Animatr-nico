//AUTOR: CARLOS ESCOBAR
//FECHA DE CREACIÓN: 08/05/2023
//ÚLTIMA MODIFICACIÓN: 08/05/2023

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

/*******************************LIBRERIAS***********************************/
#include <stdio.h>
#include <xc.h>
#include <stdint.h>
#include <stdlib.h>
#include <pic16f887.h>


#define _XTAL_FREQ 8000000 //FRECUENCIA DEL OSCILADOR 
#define dirEEPROM_0 0x04 //DIRECCIÓN DONDE LO GUARDAREMOS COMO CONSTANTE

int canal;
char opcion;
int pot_value, pwm_duty_cycle; //VARIABLE PARA ENVIAR AL POTENCIÓMETRO
uint8_t servo0, servo1, servo2, servo3;
uint8_t servo_lec0, servo_lec1, servo_lec2, servo_lec3; //VARIABLES PARA LA LECTURA DE LOS SERVOS
uint8_t botonPrevState; //VARIABLE PARA PREVENIR EL ANTIRREBOTE
uint8_t modo=0;
uint8_t conta=0;
//PROTOTITPOS
void setup(void); //PROTOTIPO DE LA FUNCIÓN DE CONFIGURACIÓN

//FUNCIONES GENERALES
void softwarePWM(void);

//FUNCIONES PARA EL MODO 0
void modo0(void);
void writeToEEPROM(uint8_t  data_0,uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t address); //FUNCIÓN DISPONIBLE PARA EL MODO 0

//FUNCIONES PARA EL MODO 1
void modo1(void);
uint8_t readFromEEPROM(uint8_t address); //FUNCIÓN PARA LEER LOS DATOS GUARDADOS

//FUNCIONES PARA EL MODO 2 Y 3
void modo2(void); //MODO PYTHON



//INTERRUPCIONES
void __interrupt() isr(void) //INTERRUPCIONES 
{
    if (PIR1bits.ADIF == 1) //SI LA BANDERA DEL ADC ESTÁ ACTIVADA   
    {
        if (canal == 0)
        {
            CCPR1L = (ADRESH >> 1) + 124; //ENVÍA EL VALOR DEL POTENCIÓMETRO 1, Desplaza a la derecha un bit, se le suma el valor de 124 para
            servo0 = (ADRESH >> 1) + 124;
            //ajustar el resultado al rango de valores permitidos en el registro CCPR1L 
        }
        else if(canal == 1)
        {
            CCPR2L = (ADRESH >> 1) + 124; //ENVÍA EL VALOR DEL POTENCIÓMETRO 2
            servo1 = (ADRESH >> 1) + 124;
        }   
        else if(canal == 2)
        {
            pwm_duty_cycle = ADRESH; // Ajusta el rango al valor máximo de CCPR1L (255)
            servo2 = (ADRESH >> 1) + 124;
            softwarePWM();
        }
        else if(canal == 3)
        {
           pwm_duty_cycle = ADRESH; // Ajusta el rango al valor máximo de CCPR1L (255)
           servo3 = (ADRESH >> 1) + 124;
           softwarePWM(); 
        }       
    }

    if (INTCONbits.RBIF == 1)
    {
        if (PORTBbits.RB7 == 0)
        {
            if (modo != 3)
            {
                modo++;
            }
            if (modo ==3)
            {
                modo = 0;
            }
            PORTE = modo;
        }
        
        INTCONbits.RBIF = 0;
    }
    
     //INTERRUPCÓN DE RECIBIR VALORES
    if (PIR1bits.RCIF) //BANDERA DEL RECEPTOR
    {
        opcion = RCREG;
        //valores[contador] = RCREG;
        //contador++;
    }
    PIR1bits.RCIF = 0;
    

    
    PIR1bits.ADIF = 0;
}
;
//FIN DE LAS INTERRUPCIONES


void setup(void)
{
    //CONFIGURACIÓN DE ENTRADAS ANALÓGICAS O DIGITALES
    ANSEL = 0b00001111; //PRIMERAS DOS ENTRADAS ANALÓGICAS
    ANSELH = 0X00;
    
    //CONFIGURACIÓN DE ENTRADAS Y SALIDAS
    TRISA = 0b00001111; //PRIMEROS DOS PINES DEL PUERTO A CONFIGURADOS COMO ENTRADAS
    TRISB = 0b11100000; //UNA ENTRDA DIGITAL
    TRISCbits.TRISC2 = 0; // Configurar RC2 (CCP1) como salida digital
    TRISCbits.TRISC1 = 0; // Configurar RC1 (CCP2) como salida digital
    TRISCbits.TRISC3 = 0; // Configurar RC2 (CCP1) como salida digital
    TRISCbits.TRISC4 = 0; // Configurar RC1 (CCP2) como salida digital
    TRISD = 0x00; //SALIDAS EN EL PUERTO D
    TRISE = 0x00;
    
    //LIMPIEZA DE PUERTOS
    PORTA = 0x00; //PUERTO A LIMPIADO
    PORTB = 0x00;
    PORTCbits.RC3 = 0;
    PORTCbits.RC4 = 0;
    PORTD = 0X00;
    PORTE = 0x00;
    
    //CONFIGURACIÓN DEL OSCILADOR
    OSCCONbits.IRCF = 0b0111; //FRECUENICA DE 8 MHZ
    OSCCONbits.SCS = 1; //RELOJ INTERNO PARA EL FUNCIONAMIENTO
    
    //CONFIGURACIÓN DEL ADC
    ADCON0bits.ADCS = 0b10; //FOSC/32
    ADCON0bits.CHS = 0;//CANAL ANALÓGICO 0, ELEGIDO COMO INICIAL
    ADCON1bits.ADFM = 0; //JUSTIFICACIÓN A LA IZQUIERDA
    ADCON1bits.VCFG1 = 0; //VSS 
    ADCON1bits.VCFG1 = 0; //VDD VOLTAJES DE REFERENCIA
     __delay_us(50);
    ADCON0bits.ADON = 1; //HABILITA EL MÓDULO ADC
    //FIN DE LA CONFIGURACIÓN DEL ADC
    
    //CONFIGURACIÓN DE LAS INTERRUPCIONES
    INTCONbits.GIE = 1; //BANDERA GLOBAL HABILITADA
    INTCONbits.PEIE = 1; //INERRUPCIONES PERIFÉRICAS HABILITADAS
    INTCONbits.RBIE = 1 ; //HABILITA LA INTERRUPCIÓN DEL PUERTO B   
    INTCONbits.RBIF = 0; //LIMPIA LA BANDERA   
    IOCBbits.IOCB7 = 1; //INTERRUPCIÓN DEL PIN 0 HABILITADA

    
        //BANDERAS DEL ADC
    PIE1bits.ADIE = 1; //HABILITA LA BANDERA DEL ADC
    PIR1bits.ADIF = 0; //COLOCA LA BANDERA DEL ADC EN 0
        //FIN DE LAS BANDERAS DEL ADC
    
        //CONFIGURACIÓN DEL PWM
    CCP1CONbits.P1M = 0; //CCP1 CONFIGURADO COMO PWM   
    CCP1CONbits.CCP1M = 0b1100; //MODO DE OPERACIÓN DEL CCP1 COMO PWM
    CCP2CONbits.CCP2M = 0b1100; //MODO DE OPERACIÓN DEL CCP2 COMO PWM
    CCPR1L = 0x0f; //LIMPIA LOS DOS BITS DEL CCPR1L
    CCPR2L = 0x0f; //LIMPIA LOS DOS BITS DEL CCPR2L
    
    CCP1CONbits.DC1B = 0; //VALOR INICIAL DEL BIT MENOS SIGNIFICATIVO DEL CANAL CCP1
    CCP2CONbits.DC2B0 = 0; //VALOR INICIAL DEL BIT MENOS SIGNFICATIVO DEL CANAL CCP2
    CCP2CONbits.DC2B1 = 0; // VALOR INICIAL DEL SEGUNDO BIT SIGNIFICATIVO DEL CANAL CCP2
        //FIN DE CONFIGURACIÓN DEL PWM
    
    //CONFIGURACIÓN DEL TIMER 2 PARA EL PWM
    PIR1bits.TMR2IF = 0; //bandera en 0
    T2CONbits.T2CKPS = 0b11; //1:16 prescaler
    T2CONbits.TMR2ON = 1;//se enciende el timer 2
    while(PIR1bits.TMR2IF == 0); //primer ciclo del timer 2
    PIR1bits.TMR2IF = 0;// se limpia la bandera del timer 2
    //FIN DE LA CONFIGURACIÓN DEL TIMER 2
    
    //CONFIGURACIÓN DE PULL UPS
    
    OPTION_REGbits.nRBPU = 0; //PULL UPS HABILITADOS
    WPUBbits.WPUB = 0b11100000; 
    
    return;
};



//FUNCIÓN DEL PWM MANUAL
void softwarePWM(void) {
    // Control manual del pin RC3 para simular PWM
    if (pwm_duty_cycle > TMR2) {
        
        if (canal == 2)
        {
            PORTCbits.RC3 = 1; // Estado alto del pin RC3
        }
        else if(canal == 3)
        {
            PORTCbits.RC4 = 1; // Estado alto del pin RC3
        }
        
    } else {
        if (canal == 2)
        {
            PORTCbits.RC3 = 0; // Estado alto del pin RC3
        }
        else if(canal == 3)
        {
            PORTCbits.RC4 = 0; // Estado alto del pin RC3
        }   
    }
}
//FIN DE LA FUNCIÓN DEL PWM MANUAL

//MODOS DE OPERANDO DEL PIC----------------------------------------------------------
void modo0(void) //MODO MANUAL DEL PIC
{
    //INTERRUPCIONES PARA EL MODO MANUAL DEL PIC
    PIE1bits.RCIE = 0;
    PIE1bits.ADIE = 1; //HABILITA LAS BANDERAS DEL ADC
    if (ADCON0bits.CHS == 0)  //SI ES EL CANAL 0
        {
            canal = 0;
            ADCON0bits.CHS = 1; //CAMBIA AL PRIMER CANAL
        }
        else if(ADCON0bits.CHS == 1) //SI ES EL CANAL 1
        {
            canal = 1;
            ADCON0bits.CHS = 2; //CAMBIA AL CANAL 2
        }
        else if(ADCON0bits.CHS == 2)
        {
            canal = 2;
            ADCON0bits.CHS = 3; //CAMBIA AL CANAL 3
        }
        else if(ADCON0bits.CHS == 3)
        {
            canal = 3;
            ADCON0bits.CHS = 0; //CAMBIA AL CANAL 0
        }
        
        
        __delay_us(50);
        ADCON0bits.GO = 1; //REALIZA CONVERSIÓN DEL ADC
        
        //PRECEDIMIENTO PARA GUARDAR EN LA EEPROM
        if(RB6 == 0)
            botonPrevState = 1; //SI PRESIONA EL PIN 0, COLOCA EL SIGUIENTE ESTADO EN 1
        if (RB6 == 1 && botonPrevState ==1)//ANTI REBOTE
        {
            writeToEEPROM(servo0, servo1,servo2,servo3, dirEEPROM_0); //SE ESCRIBE A LA EEPROM EL VALOR DEL POTENCIÓMETRO EN LA DIRECCIÓN
            botonPrevState = 0;//COLOCA EL SIGUIENTE ESTADO EN 0, CUANDO PRESIONA EL PIN 0
        }
        
        return;
}

//FUNCIÓN PARA ESCRIBIR EN LA MEMORIA EEPROM
void writeToEEPROM(uint8_t  data_0,uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t address) //FUNCIÓN DISPONIBLE PARA EL MODO 0
{
    INTCONbits.GIE = 0; // INTERRUPCIONES DESABILITADAS
    EEADR = address; //EL REGISTRO EEADR RECIBE LA DIRECCIÓN DONDE SE GUARDA
    
    EEDAT = data_0;//EL REGISTRO EEDAT RECIBE EL DATA
    EECON1bits.EEPGD = 0; //ESCRIBIR A MEMORIA DE DATOS
    EECON1bits.WREN = 1; //HABILITAR ESCRITURA A EEPROM
    EECON2 = 0x55; //SECUENCIA OBLIGATORIA
    EECON2 = 0xAA;
    EECON1bits.WR = 1; //HABILITA LA ESCRITURA
    while (EECON1bits.WR); //ESPERA A QUE LA ESCRITURA SE TERMINE
    
    //ESCRITURA DEL SEGUNDO
    EEADR++;
    EEDATA = data_1;
    EECON1bits.WREN = 1;
    INTCONbits.GIE = 0;
    EECON2 = 0x55;
    EECON2 = 0xAA;
    EECON1bits.WR = 1;
    while (EECON1bits.WR);

    EEADR++;
    EEDATA = data_2;
    EECON1bits.WREN = 1;
    INTCONbits.GIE = 0;
    EECON2 = 0x55;
    EECON2 = 0xAA;
    EECON1bits.WR = 1;
    while (EECON1bits.WR);

    EEADR++;
    EEDATA = data_3;
    EECON1bits.WREN = 1;
    INTCONbits.GIE = 0;
    EECON2 = 0x55;
    EECON2 = 0xAA;
    EECON1bits.WR = 1;
    while (EECON1bits.WR);
    
    EECON1bits.WREN = 0; //DESABILITA LA ESCRITURA
    INTCONbits.GIE = 1; //HABILITA LAS INTERRUCIONES OTRA VEZ
}
//FIN DE LA FUNCIÓN PARA ESCRIBIR EN LA MEMORIA EEPROM*********************************
//FIN DE LOS MODOS DE OPERANDO DEL PIC----------------------------------------------------

//FUNCIONES PARA EL MODO 1

void modo1(void)
{
    PIE1bits.RCIE = 0;
    PIE1bits.ADIE = 0; //DESABILITA LAS BANDERAS DEL ADC
    
    if (PORTBbits.RB5 == 0)
    {
        readFromEEPROM(dirEEPROM_0);
        CCPR1L = servo_lec0; // RECIBE EL VALOR DEL SERVO 0
        CCPR2L = servo_lec1; //RECIBE EL VALOR DEL SERVO 1
        
        //RECIBEN PWM MANUALES
        if (servo_lec2 > TMR2){ //PWM MANUAL 1
            PORTCbits.RC3 = 1;
        }
        else
        {
            PORTCbits.RC3 = 0;
        }
        
        if (servo_lec3 > TMR2) //PWM MANUAL 2
        {
            PORTCbits.RC4 = 1;
        }
        else
        {
            PORTCbits.RC4 = 0;
        }
        //FIN DE RECIBIR DE LOS PWM MANUALES
    }
    return;
}

uint8_t readFromEEPROM(uint8_t address)
{
    EEADR = address; //ENVIA LA DIRECCIÓN
    EECON1bits.EEPGD = 0;//ESCRIBE EN MEMORIA DE DATOS
    EECON1bits.RD = 1;//HABILITA LA LECTURA
    //nop();
    //return EEDAT;  //REGRESA EL VALOR DE DONDE GUARDÓ 

    // Lee el primer dato de la EEPROM
    servo_lec0 = EEDATA;

    // Lee el siguiente dato de la EEPROM
    EEADR++;
    EECON1bits.RD = 1;
    servo_lec1 = EEDATA;

    // Lee el tercer dato de la EEPROM
    EEADR++;
    EECON1bits.RD = 1;
    servo_lec2 = EEDATA;

    // Lee el cuarto dato de la EEPROM
    EEADR++;
    EECON1bits.RD = 1;
    servo_lec3 = EEDATA;
    
}
//FIN DE LA FUNCIÓN PARA PODER LEER LO GUARDADO EN LA EEPROM****************************
//FIN DE LAS FUNCIONES PARA EL MODO 1******************************************************

//FUNCIONES PARA EL MODO 2 Y 3
void modo2(void) //FUNCIÓN DESDE PYTHON
{
    GIE = 1;
    PIE1bits.RCIE = 1;
    PIE1bits.ADIE = 0; //DESABILITA LAS BANDERAS DEL ADC
    
    opcion = '\0';
    while(opcion == '\0'); //MIENTRAS NO INGRESE NADA
    switch(opcion){
        case '1':   //DE INGRESARSE 2, EJECUTAR LA FUNCIÓN DE ASCII
            CCPR1L = 255;
            break;
        case '2':   //DE INGRESARSE 2, EJECUTAR LA FUNCIÓN DE ASCII
            CCPR1L = 127;
             break;
        case '3': 
            CCPR2L = 255;
            break;
        case '4': 
            CCPR2L = 127;
            break;
        default:    //opcion no existente
                        //cadena("No existe esa opcion, presione enter para continuar \r"); //CASO QUE INGRESE ALGO QUE NO EXISTA
            CCPR1L = 255;
            CCPR2L = 255;
            if (255 > TMR2){ //PWM MANUAL 1
                PORTCbits.RC3 = 1;
                        }
            else
            {
                 PORTCbits.RC3 = 0;
            }

            if (255 > TMR2) //PWM MANUAL 2
            {
                PORTCbits.RC4 = 1;
            }
            else
            {
                PORTCbits.RC4 = 0;
            }
             break;
                }   
            __delay_ms(100); // ESPERA UN DELAY
    return;
    
};

void initUART(void){
    SPBRG = 12; //SPBRGH:SPBRG  = [(8Mhz/9600)/64]-1 = 12 ? real 9615.38
    SPBRGH = 0; //%error = (9615.38-9600)/9600 * 100 = 0.16%
    TXSTAbits.SYNC = 0; //COMUNICACIÓN DE LADO A LADO (ASÍNCRONA)
    BRGH = 0;   
    BRG16 = 0;
    
    
    CREN = 1; //HABILITA EL RECEPTOR
    SYNC = 0;   // TXSTAbits ? habilitar transmision & TXIF = 1
    SPEN = 1;   //RCSTAbits ? apagar bandera TX
    TXSTAbits.TXEN = 1; //permite transmitir
    
    
    RCSTAbits.RX9 = 0;//9 BITS HABILITADOS
    RCSTAbits.CREN =1 ; //RECEPTOR HABILITADO
    
    //paso 4
    TXEN = 1;//TRANSMISIÓN HABILITADA
    TXIF = 0;//BANDERA EN 0
    //C
    
    //paso 5: interrupciones
    PIE1bits.RCIE = 1; //HABILITA LA INTERRUPCIÓN DEL EUSART
    PIR1bits.RCIF = 0; //COLOCA LA BANDERA EN 0
}


void main(void){
    setup(); //LLAMADA A LA RUTINA DE CONFIGURACIÓN
    initUART(); //INICIA LA COMUNICACIÓN
        while(1){
            //modo0();
            if (modo == 0)
            {
                modo0();  
            }
            else if(modo == 1)
            {
            modo1(); 
            }
            else if (modo == 2)
            {
            modo2();     
            }
    
        }
    
};



