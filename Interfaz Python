# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'botones_python.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#AUTOR: CARLOS ESCOBAR
#FECHA DE CREACIÓN: 31/05/2023
#ÚLTIMA MODIFICACIÓN: 31/05/2023

#LIBRERÍAS PARA ADAFRAUIT Y SERIAL***********************
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import serial
import time

flag = 0#BANDERA QUE DETERMINA SI ES ADAFRUIT O PYTHON
#FIN DE LAS LIBRERÍAS NECESARIAS**************************

#PARÁMETROS PARA IMPORTAR DESDE ADAFRUIT A PYTHON***********
from Adafruit_IO import Client
aio = Client('caescobar06', 'aio_SwVG860YL4KoLtnrbB6oCwAArJ6g') #USUARIO Y CLAVE DE USUARIO
pic = serial.Serial('COM4', 9600)
time.sleep(1)



print("Programa Corriendo")
#FIN DE LOS PARÁMETROS**************************************


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(413, 285)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

    #CONFIGURACIÓN DE BOTONES-----------------------------------------------
        #CONFIGURACIÓN DEL BOTÓN 1----------------------------------
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(150, 50, 121, 51))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.send_value_0)

        #CONFIGURACIÓN DEL BOTÓN 2----------------------------------
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 170, 121, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.send_value_1)

        #CONFIGURACIÓN DEL BOTÓN 3----------------------------------
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 110, 111, 51))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.send_value_2)

        #CONFIGURACIÓN DEL BOTÓN 4----------------------------------
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 110, 111, 51))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.send_value_3)

        #CONFIGURACIÓN DEL BOTÓN 5----------------------------------
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(150, 110, 121, 51))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.set_flag)

    #FIN DE LA CONFIGURACIÓN DE LOS BOTONES------------------------


    #CONFIGURACIÓN DE LABELS---------------------------------------------------
        #CONFIGURACIÓN DE LABEL 1--------------------------------------
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 20, 331, 16))
        self.label.setObjectName("label")
        #FIN DE LA CONFGURACIÓN DEL LABEL 1----------------------------

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 413, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):#FUNCIÓN PARA ESTABLECER ETIQUETAS Y VALORES SUPERFICIALES*************
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        #CONFIGURACIÓN DE LOS BOTONES------------------------------------------------------------------------------
        self.pushButton.setText(_translate("MainWindow", "Derecha"))
        self.pushButton_2.setText(_translate("MainWindow", "Izquierda"))
        self.pushButton_3.setText(_translate("MainWindow", "Arriba"))
        self.pushButton_4.setText(_translate("MainWindow", "Abajo"))
        self.pushButton_5.setText(_translate("MainWindow", "Adafruit"))
        #self.pushButton_6.setText(_translate("MainWindow", "Cerrar"))
        #FIN DE LA CONFIGURACIÓN DE LOS BOTONES---------------------------------------------------------------------
        self.label.setText(_translate("MainWindow", "Presione el botón con la acción que desea realizar:"))

    def send_value_0(self):
        global flag 
        flag = 0
        if (flag == 0):
            value = 1  # Valor a enviar al PIC (SUBIR OJO)
            pic.write(str(value).encode())  # Envía el valor al PIC
    
    def send_value_1(self):
        global flag 
        flag = 0
        if (flag == 0):
            value = 2  # Valor a enviar al PIC (BAJAR OJO)
            pic.write(str(value).encode())  # Envía el valor al PIC
    
    def send_value_2(self):
        global flag
        flag =0
        if (flag == 0):
            value = 3  # Valor a enviar al PIC (ojo a la derecha)
            pic.write(str(value).encode())  # Envía el valor al PIC
    
    def send_value_3(self):
        global flag
        flag = 0
        if (flag == 0):
            value = 4  # Valor a enviar al PIC (OJO A LA IZQUIERDA)
            pic.write(str(value).encode())  # Envía el valor al PIC
    
    def set_flag(self):
        global flag
        flag = 1
        #while (flag == 1):
        if (flag == 1):
            data = aio.receive('ejex')
            valor = data.value
            if valor is not None:
                # Ajusta la codificación según los datos que deseas enviar al PIC
                datos_a_enviar = valor.encode()  # Codifica como bytes
                # Envía los datos al PIC
                for i in range(5):
                    pic.write(datos_a_enviar)
                    time.sleep(0.1)  # Espera de 1 segundo antes de enviar el siguiente dato
                print('Enviado: {0}'.format(valor))

    
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
